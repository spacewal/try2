# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jLmrO8hK4zP31xZus0NbAdGt_XkqsAGP
"""

import streamlit as st
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout, BatchNormalization, AdditiveAttention, Permute, Reshape, Multiply
from keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau, TensorBoard, CSVLogger
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
import mplfinance as mpf

def analyze_stock(ticker):
    st.write(f"Analyzing {ticker} stock...")

    data = yf.download(ticker, start='2020-01-01', end='2024-01-01')
    data.isnull().sum()
    data.fillna(method='ffill', inplace=True)

    scaler = MinMaxScaler(feature_range=(0, 1))
    data_scaled = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

    X, y = [], []
    for i in range(60, len(data_scaled)):
        X.append(data_scaled[i-60:i, 0])
        y.append(data_scaled[i, 0])

    X_train, y_train = np.array(X), np.array(y)
    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

    model = build_model(X_train)

    early_stopping = EarlyStopping(monitor='val_loss', patience=10)
    model_checkpoint = ModelCheckpoint('best_model.h5', save_best_only=True, monitor='val_loss')
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5)
    tensorboard = TensorBoard(log_dir='./logs')
    csv_logger = CSVLogger('training_log.csv')
    callbacks_list = [early_stopping, model_checkpoint, reduce_lr, tensorboard, csv_logger]

    history = model.fit(X_train, y_train, epochs=100, batch_size=25, validation_split=0.2, callbacks=callbacks_list)
    st.write("Model trained!")

def build_model(X_train):
    model = Sequential()
    model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
    model.add(LSTM(units=50, return_sequences=True))
    model.add(LSTM(units=50))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

def main():
    st.sidebar.header('User Input Features')
    ticker = st.sidebar.text_input("Ticker", value='AAPL', max_chars=None, key=None, type='default')

    if st.sidebar.button('Analyze'):
        analyze_stock(ticker)

if __name__ == "__main__":
    main()